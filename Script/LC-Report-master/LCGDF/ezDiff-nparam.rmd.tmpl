---
title: "组间差异分析报告 - 非参数检验"
author: "Sagene"
date: "{{DATE}}"
output: 
  html_document:
    toc: True
    toc_depth: 3
    toc_float: True
    theme: cerulean
---

```{r warning = FALSE, include=FALSE}
require(lance)
require(ggplot2)
require(reshape2)
require(ggthemes)
require(grid)
require(gridExtra)
require(stringr)
require(pheatmap)
require(knitr)
require(kableExtra)

####### Functions #######

writeTable <- function(df, ID, filename){
  df = cbind(rownames(df), df)
  colnames(df)[1] = ID
  write.table(df, filename, sep = '\t', quote = F, col.names = T, row.names = F)
}


####### COLORS #######

GCOLOR = c("#00293F","#CD3131","#A0DBDB","#305973","#56A7A7","#06C1B6","#6A0000","#B17D58","#4A2C2C","#AB1212")
GCOLOR = rep(GCOLOR, 100)
SCOLOR = c("#729A97","#624C9A")

####### Parameters #######

### For Data
DF        = "{{IN_FILE}}"
RN        = {{RN}}                 # Which column is used as the row names
SKIP      = "{{CSKIP}}"            # Which columns are skipped when using the data table
GROUP     = "{{GROUP}}"
ID        = "{{ID}}"
VAL       = "{{VAL}}"

### For Test
SEL       = {{SEL}}
P.ADJ1    = '{{PADJ1}}'
P.ADJ2    = '{{PADJ2}}'
CONF      = {{CONF}}
PAIRED    = {{PAIR}}

### For Filter
G.THREAS  = {{GFIL}}  # Filter threashold for group-wise test
P.THREAS  = {{PFIL}}  # Filter threashold for pair-wise test

### For Output
OUT.PREFIX  = "{{OUTPFX}}"
G.OUT.DIR   = "{{GDIR}}"
P.OUT.DIR   = "{{PDIR}}"
OUT.QQ      = {{OUTQQ}}
QQ.DIR      = "{{QQDIR}}"

####### Read the data #######

df = read.delim2(DF, header = T, stringsAsFactors = F)
rownames(df) = df[[RN]]
SKIP = as.numeric(unlist(strsplit(SKIP, ',')))
df = df[-c(RN, SKIP)]
group.labs = as.factor(unlist(strsplit(GROUP, ',')))
sample.labs = colnames(df)
if(length(unique(sample.labs)) != length(sample.labs)){
  stop("[Lance Error] Non-unique sample labels in the data table!")
}

df = as.data.frame(apply(df, c(1,2), as.numeric))


####### Do the test #######

re.group = lc.kruskal.test(df           = df, 
                           group.labs   = group.labs, 
                           sel          = SEL, 
                           p.adj        = P.ADJ1)

re.pair = lc.wilcox.test(df              = df, 
                         group.labs      = group.labs, 
                         sel             = SEL, 
                         is.paired       = PAIRED,
                         sided           = 'two.sided', 
                         conf.level      = CONF, 
                         p.adj.intra     = P.ADJ1, 
                         p.adj.inter     = P.ADJ2)

### Output the results and filtered results of KW Test
group.table = cbind(re.group$Statistics, re.group$Result)
group.table.out = group.table[order(group.table$p.value.adjusted, decreasing = F),]
filename = paste0(G.OUT.DIR, '/', OUT.PREFIX, ".KW.tsv")
writeTable(group.table.out, ID, filename)

group.table.p.filter = group.table[group.table$p.value < G.THREAS,]
group.table.p.filter = group.table.p.filter[complete.cases(group.table.p.filter),]
filename = paste0(G.OUT.DIR, '/', OUT.PREFIX, ".KW.p.filtered.", G.THREAS, ".tsv")
writeTable(group.table.p.filter, ID, filename)

if (dim(group.table.p.filter)[1]>0){
  df.group.p.filter = df[group.table$p.value < G.THREAS,]
  df.group.p.filter = df.group.p.filter[complete.cases(df.group.p.filter),]
  nrecord = dim(df.group.p.filter)[1]
  df.group.p.filter = cbind(rownames(df.group.p.filter), df.group.p.filter)
  colnames(df.group.p.filter)[1] = ID
  df.group.p.filter = melt(df.group.p.filter, id.vars = ID)
  colnames(df.group.p.filter) = c(ID, "Sample", VAL)
  df.group.p.filter$Group = apply(df.group.p.filter, 1, 
                                  function(x){group.labs[which(sample.labs == x[2])]})
  
  p = ggplot(df.group.p.filter, aes(x=as.factor(df.group.p.filter[[1]]), y=df.group.p.filter[[3]], fill=Group)) + 
      geom_violin(aes(fill = NULL), fill = "transparent", colour = "grey") +  
      geom_boxplot() + 
      theme_classic() + 
      labs(x = ID, y = VAL) +
      theme(axis.text.x = element_text(angle = 30, hjust = 0.5, vjust = 0.5)) +
      scale_fill_manual(values = GCOLOR)
  if (nrecord > 6){
    p = p + theme(legend.position="top")
  }
  
  filename = paste0(G.OUT.DIR, '/', OUT.PREFIX, ".KW.p.filtered.", G.THREAS)
  ggsave(paste0(filename, '.png'), width = max(10, nrecord), limitsize=F)
  ggsave(paste0(filename, '.pdf'), width = max(10, nrecord), limitsize=F)
}

group.table.q.filter = group.table[group.table$p.value.adjusted < G.THREAS,]
group.table.q.filter = group.table.q.filter[complete.cases(group.table.q.filter),]
filename = paste0(G.OUT.DIR, '/', OUT.PREFIX, ".KW.q.filtered.", G.THREAS, ".tsv")
writeTable(group.table.q.filter, ID, filename)

if (dim(group.table.q.filter)[1]>0){
  df.group.q.filter = df[group.table$p.value.adjusted < G.THREAS,]
  df.group.q.filter = df.group.q.filter[complete.cases(df.group.q.filter),]
  nrecord = dim(df.group.q.filter)[1]
  df.group.q.filter = cbind(rownames(df.group.q.filter), df.group.q.filter)
  colnames(df.group.q.filter)[1] = ID
  df.group.q.filter = melt(df.group.q.filter, id.vars = ID)
  colnames(df.group.q.filter) = c(ID, "Sample", VAL)
  df.group.q.filter$Group = apply(df.group.q.filter, 1, 
                                  function(x){group.labs[which(sample.labs == x[2])]})
  
  p = ggplot(df.group.q.filter, aes(x=as.factor(df.group.q.filter[[1]]), y=df.group.q.filter[[3]], fill=Group)) + 
      geom_violin(aes(fill = NULL), fill = "transparent", colour = "grey") +  
      geom_boxplot() + 
      theme_classic() + 
      labs(x = ID, y = VAL) +
      theme(axis.text.x = element_text(angle = 30, hjust = 0.5, vjust = 0.5)) +
      scale_fill_manual(values = GCOLOR)
  if (nrecord > 6){
    p = p + theme(legend.position="top")
  }
  
  filename = paste0(G.OUT.DIR, '/', OUT.PREFIX, ".KW.q.filtered.", G.THREAS)
  ggsave(paste0(filename, '.png'), width = max(10, nrecord), limitsize=F)
  ggsave(paste0(filename, '.pdf'), width = max(10, nrecord), limitsize=F)
}

### Output the results and filtered results of pairwise test
pair.table = cbind(re.pair$Statistics, re.pair$Result)
filename = paste0(P.OUT.DIR, '/', OUT.PREFIX, ".pairwise.MW.all.tsv")
writeTable(pair.table, ID, filename)

pair.p.filtered = which(rowSums(re.pair$p.unadjusted < 0.05) > 0)
pair.table.p.filtered = pair.table[pair.p.filtered, ]
filename = paste0(P.OUT.DIR, '/', OUT.PREFIX, ".pairwise.MW.all.p.filtered.", P.THREAS, ".tsv")
writeTable(pair.table.p.filtered, ID, filename)

pair.q1.filtered = which(rowSums(re.pair$p.adjusted.intra < 0.05) > 0)
pair.table.q1.filtered = pair.table[pair.q1.filtered, ]
filename = paste0(P.OUT.DIR, '/', OUT.PREFIX, ".pairwise.MW.all.q1.filtered.", P.THREAS, ".tsv")
writeTable(pair.table.q1.filtered, ID, filename)

pair.q2.filtered = which(rowSums(re.pair$p.adjusted.inter < 0.05) > 0)
pair.table.q2.filtered = pair.table[pair.q2.filtered, ]
filename = paste0(P.OUT.DIR, '/', OUT.PREFIX, ".pairwise.MW.all.q2.filtered.", P.THREAS, ".tsv")
writeTable(pair.table.q2.filtered, ID, filename)


### Output the results and filtered results of pairwise test

each.list = re.pair$Each

writeEach <- function(x, P.OUT.DIR, OUT.PREFIX, P.THREAS, ID, VAL){
  group1 = x[[1]]
  group2 = x[[2]]
  results = x[[3]]
  
  results = results[order(results[ncol(results)-1], decreasing = F), ]
  filename = paste0(P.OUT.DIR, '/', OUT.PREFIX, ".pairwise.MW.", group1, '-', group2, ".tsv")
  writeTable(results, ID, filename)
  
  results.p.filter = results[results[dim(results)[2]-1] < P.THREAS,]
  results.p.filter = results.p.filter[complete.cases(results.p.filter),]
  filename = paste0(P.OUT.DIR, '/', OUT.PREFIX, ".pairwise.MW.", group1, '-', group2, ".p.filter.",P.THREAS ,".tsv")
  writeTable(results.p.filter, ID, filename)
  
  results.q.filter = results[results[dim(results)[2]] < P.THREAS,]
  results.q.filter = results.q.filter[complete.cases(results.q.filter),]
  filename = paste0(P.OUT.DIR, '/', OUT.PREFIX, ".pairwise.MW.", group1, '-', group2, ".q.filter.",P.THREAS ,".tsv")
  writeTable(results.q.filter, ID, filename)
  
  ## select groups and corresponding data from the original table.
  group.sub = as.factor(as.character(group.labs[group.labs == group1 | group.labs == group2]))
  df.sub = df[group.labs == group1 | group.labs == group2]
  df.sub = cbind(rownames(df.sub), df.sub)
  colnames(df.sub)[1] = ID
  
  ## Draw figures for each of the unfiltered and filtered tables
  for (i in c("results", "results.p.filter", "results.q.filter", "display")){
    if (i == "display"){
        result.plot = get("results")
        if(nrow(result.plot)>15) result.plot = result.plot[1:15,]
      } else {
        result.plot = get(i)
      }
    result.plot = result.plot[complete.cases(result.plot),]
    if (nrow(result.plot) == 0) next
    result.plot = cbind(rownames(result.plot), result.plot)
    colnames(result.plot)[1] = ID
    result.plot[1] = as.factor(result.plot[[1]])
    result.plot = result.plot[order(result.plot[[1]]),]
    
    df.filter = merge(result.plot, df.sub, all.x = T, all.y = F, by = ID)
    df.filter = df.filter[order(df.filter[[1]]),]
    df.p = rep(df.filter[[8]], each = 2) # used to sort the order of the bars in the plots
    df.filter = df.filter[-c(2:9)]
    
    df.filter.median = lc.groupRowMedian(df.filter[-1], group.sub)
    df.filter.median = cbind(df.filter[[1]], df.filter.median)
    colnames(df.filter.median)[1] = ID
    df.filter.median = melt(df.filter.median, measure.vars = c(2,3), variable.name = "Group", value.name = "Median")
    
    df.filter.sd = lc.groupRowSD(df.filter[-1], group.sub)
    df.filter.sd = cbind(df.filter[[1]], df.filter.sd)
    colnames(df.filter.sd)[1] = ID
    df.filter.sd = melt(df.filter.sd, measure.vars = c(2,3), variable.name = "Group", value.name = "SD")
    
    df.filter.stat = merge(df.filter.median, df.filter.sd)
    
    p1 = ggplot(df.filter.stat, aes(x = reorder(df.filter.stat[[1]], -df.p), y = Median, fill = Group)) +
         geom_bar(position=position_dodge(), stat="identity", colour = "black", size = 0.2) +
         geom_errorbar(aes(ymax = Median + SD, ymin = Median),
                       size = 0.3,
                       width = 0.2,
                       colour = "grey25",
                       position = position_dodge(0.9)) +
         labs(x = ID, y = VAL) + 
         coord_flip() + 
         scale_y_continuous(expand = c(0,0)) +
         theme_classic() +
         theme(legend.position = "left") +
         scale_fill_manual(values = SCOLOR)
    
    p2 = ggplot(result.plot, aes(x = reorder(result.plot[[1]], -result.plot[[8]]))) + 
         geom_errorbar(aes(ymax = result.plot[[5]], ymin = result.plot[[6]]),
                       size = 0.3,
                       width = 0.1,
                       colour = "grey25",
                       position = position_dodge(0.9)) + 
         geom_point(aes(y = result.plot[[4]]))  +
         geom_abline(intercept = 0, slope = 0, size=0.3, colour='grey25', lty = 2)
    
    
    ymin = min(result.plot[[5]])
    ymax = max(result.plot[[6]])
    ylim = max(abs(ymin), abs(ymax))
    
    p2 = p2 + ylim(-ylim, ylim) +
         labs(x = NULL, y = paste(VAL, "Location Difference")) +
         coord_flip() +
         theme_classic() +
         theme(axis.line.y = element_blank(), axis.ticks.y = element_blank(), axis.text.y = element_blank()) +
         ylab(element_blank())
    
    p.label = paste0("p = ", sprintf("%.3f", round(result.plot[[8]], 3)), 
                   "    p.adj = ", sprintf("%.3f", round(result.plot[[9]], 3)))
    
    p3 = ggplot(result.plot, aes(x = reorder(result.plot[[1]], -result.plot[[8]]))) + 
         geom_text(aes(label = p.label, y=0.5)) + 
         labs(x = NULL, y = "P Values") +
         coord_flip() +
         theme_classic() +
         theme(axis.line.y = element_blank(), axis.ticks.y = element_blank(), axis.text.y = element_blank(),
               axis.line.x = element_line(colour = 'white'), axis.ticks = element_line(colour = 'white'),
               axis.text.x = element_text(colour = 'white')) +
         theme(panel.background = element_rect(colour = "grey95", fill = "grey95")) +
         ylim(0, 1) + 
         labs(element_blank())
    
    p = grid.arrange(p1, p3, p2, ncol=3, nrow=1, widths = c(3,1,3))
    
    if (i != "display"){
      filename = str_replace(i, "results", "")
      filename = paste0(P.OUT.DIR, '/', OUT.PREFIX, ".pairwise.MWtest.", group1, '-', group2, filename)
      
      png(paste0(filename, ".png"), width = 16, height = max(0.4 * nrow(result.plot), 5), units = "in", res = 300)
      grid.draw(p)
      dev.off()
      pdf(paste0(filename, ".pdf"), width = 16, height = max(0.4 * nrow(result.plot), 5))
      grid.draw(p)
      dev.off()
    } 
  }
  
  return(p)
}

mw.plot = lapply(each.list, writeEach, P.OUT.DIR, OUT.PREFIX, P.THREAS, ID, VAL)

```

组间差异分析是对变量在不同组之间平均值的差异显著性进行检验的统计学方法，可以用于考察分组变量对于所研究变量取值的影响程度，并进而分析分组变量与所研究变量之间潜在关联性。非参数检验是指在对数据分布未知、或对数据分布已知但其参数未知的情况下，对两个独立样本所来自的总体的分布形态是否有显著差异进行检验的统计方法。本报告中对多组独立样本的均值采用Kruskal-Wallis检验进行差异分析，对两两组间差异比较采用Mann-Whitney U检验分析。

### 数据正态性分析
非参数检验通常用于样本量较小且样本分布显著偏离正态分布的数据集。对于样本量足够大或样本分布近似正态分布的数据集而言，参数检验方法的检验效力通常会更高。因此，本报告首先通过qq图分析样本数据的分布情况。更为详细的数据正态性分析请使用LCNT工具。下图展示了输入数据集中第一个变量在第两个组中分布的qq图。qq图的横轴为数据点在样本中的分位数，纵轴为数据点的理论分位数。红色直线为当该变量服从正态分布时数据点的拟合直线。数据点越靠近直线，就表明数据点偏离正态分布的程度越低。

```{r warning = FALSE, echo = F, fig.height = 5, fig.width = 10.8, fig.align = 'center'}
v1 = unlist(df[1, group.labs == levels(group.labs)[1]])
v2 = unlist(df[1, group.labs == levels(group.labs)[2]])
p1 = lc.qq(v1, name = paste0(rownames(df)[1],' in Group ',levels(group.labs)[1]), save.plot = F)
p2 = lc.qq(v1, name = paste0(rownames(df)[1],' in Group ',levels(group.labs)[2]), save.plot = F)

grid.newpage()
pushViewport(viewport(layout = grid.layout(1, 2)))
print(p1, vp = viewport(layout.pos.row = 1, layout.pos.col = 1))
print(p2, vp = viewport(layout.pos.row = 1, layout.pos.col = 2))

```

```{r warning = FALSE, include = F}

if(OUT.QQ){
  drawqq <- function(row, group.labs, QQ.DIR, OUT.PREFIX){
    lab = row[[1]]
    row = row[-1]
    for (group in levels(group.labs)){
      row.sub = row[group.labs == group]
      row.sub = as.numeric(row.sub)
      lc.qq(row.sub, name = paste0(lab, ' in Group ', group), plot.prefix = paste0(QQ.DIR, '/', OUT.PREFIX, '.', lab, '-', group), save.plot = T)
    }
  }
  df.qq = cbind(rownames(df), df)
  apply(df.qq, 1, drawqq, group.labs, QQ.DIR, OUT.PREFIX)
}

```

### Kruskal Wallis检验
Kruskal Wallis检验又称Kruskal Wallis H检验，由W. Kruskal和W. A. Wallis发明，用于比较两个或多个样本是否来自于同一总体。更进一步，当样本来自形状和比例接近的一个或多个分布时，Kruskal Wallis检验的原假设即为所有样本的中位数是否具有显著差异。与方差分析不同的是，Kruskal Wallis检验首先需要对所有数据进行排序，并根据数据的秩（数据点在所有数据中的排序位置）和其所属的组（数据点所代表的个体的分组变量的取值）计算如下的H统计量，其服从$\chi^2$分布：
$$H = (N-1)\frac{\sum_{i=1}^{g}n_{i}(\bar{r}_{i\cdot}-\bar{r})^2}{\sum_{i=1}^g\sum_{j=1}^{n_i}(r_{ij}-\bar{r})^2} \sim \chi^2_{g-1}$$
其中：
$$\bar{r}_{i\cdot} = \frac{\sum_{j=1}^{n_i}r_{ij}}{n_i}, \bar{r} = \frac{1}{2}\cdot(N+1)$$

* $n_i$为第$i$组的样本容量；

* $r_{ij}$为第$i$组中个体$j$的秩；

* $N$为样本点的总数。

注意，当部分组的样本容量过小（例如小于5）时，上述H统计量显著偏离$\chi^2$分布，此时Kruskal Wallis检验的准确性会降低。

下表展示了Kruskal Wallis检验的部分结果：表中包括了变量在各组中的中位数和标准差。p.value为Kruskal Wallis检验得到的差异显著性。当p值低于某一阈值时（通常为0.05，但应根据实际情况决定选择合适的阈值），可以认为有足够的证据支持备则假设成立。p.value.adjusted为多重比较矫正后的p值。最后一列statistics为每个变量进行Kruskal Wallis检验后得到的H统计量。

```{r warning = FALSE, echo = F}

df.display = group.table.out[complete.cases(group.table.out), ]
ngroup = length(levels(group.labs))
if(ngroup<=3){
  df.display = df.display[1:6,]
}else{
  ncol = ncol(group.table.out)
  df.display = df.display[1:6, c(1:6, (ncol-3):ncol)]
}
k = kable(df.display, format = 'html', digits = 3, align = 'c')
kable_styling(k, font_size = 12)

```

在结果文件夹中包括了所有变量Kruskal Wallis检验的结果表格，以及根据p值和矫正后的p值进行筛选后的结果。如果表格为空则表示没有变量的结果符合筛选条件。下图展示了原数据集中部分变量在各组中分布的箱线图。如果根据p值或矫正后的p值筛选得到的表格不为空，则结果文件夹中还会包括对应筛选得到的显著差异的变量在各组中分布情况的箱线图。

```{r warning = FALSE, echo = F, fig.width = 10.8, fig.align = 'center'}

if(nrow(df) * ngroup > 24){
  nrecord.totake = ceiling(24/ngroup)
  df.boxplot = df[1:nrecord.totake,]
} else {
  df.boxplot = df
}

df.boxplot = cbind(rownames(df.boxplot), df.boxplot)
colnames(df.boxplot)[1] = ID
df.boxplot = melt(df.boxplot, id.vars = ID)
colnames(df.boxplot) = c(ID, "Sample", VAL)
df.boxplot$Group = apply(df.boxplot, 1, function(x){group.labs[which(sample.labs == x[2])]})
  
ggplot(df.boxplot, aes(x=as.factor(df.boxplot[[1]]), y=df.boxplot[[3]], fill=Group)) + 
      geom_violin(aes(fill = NULL), fill = "transparent", colour = "grey") +  
      geom_boxplot() + 
      theme_classic() + 
      labs(x = ID, y = VAL) +
      theme(axis.text.x = element_text(angle = 30, hjust = 0.5, vjust = 0.5)) +
      scale_fill_manual(values = GCOLOR)


```

上图展示的结果图，横轴为变量，纵轴为变量的取值。图中灰色线条为该变量在所有组中的取值分布情况，箱线图则表示变量在各自分组中的取值分布情况。

### Mann-Whitney U检验
Mann-Whitney U检验又称Mann-Whitney-Wilcoxon检验或Wilcoxon秩和检验，用于两组间的数据差异分析。与Kruskal Wallis检验相似，对于来自形状和比例接近的分布的数据，Mann-Whitney U检验的原假设是两个分布的中位数是否相等。对于非近似正态分布的连续变量或排序变量，Mann-Whitney U检验采用所有样本点排序后的秩，计算原假设成立时，观察到当前样本及比当前样本更为极端的数据的可能性。由此判断两个样本之间差异的显著性。

下表展示了Mann-Whitney U检验的部分结果：表中前两列为变量在两组中的中位数，第三列为两组位置参数的差异。注意，该差异并非两个样本中位数的差异，而是从两组中分别抽取任意一个变量后两者差值的所有可能值得中位数。第四列与第五列为位置参数差异的置信区间。第六列为Mann-Whitney U检验的统计量U。第七列为Mann-Whitney U检验的p值。第八列为经过多变量比较矫正后的p值。
```{r warning = FALSE, echo = F}

df.display.mw = re.pair$Each[[1]][[3]][1:6,]
k = kable(df.display.mw, format = 'html', digits = 3, align = 'c')
kable_styling(k, font_size = 12)

```

在结果文件夹中文件名包含“pairwise.MW.all”的文件中包括了所有组件差异的结果，同时还包括了对多重组间比较再次进行矫正后的p值（列名为p.adjust.inter，仅经过多重变量比较矫正的p值列名为p.adjust.intra）。

下图同样展示了Mann-Whitney U检验的部分结果。图中左侧为变量在两个组中均值及标准误的条形图；中间为变量均值在两组间差异的显著性，包括p值和矫正后的p值；右侧展示了组间位置参数的差异及其置信区间。

```{r warning = FALSE, echo = F, fig.width = 15, fig.align = 'center'}

grid.draw(mw.plot[[1]])

```

在结果文件夹中包括了所有变量的组间比较统计图，以及分别根据p值和矫正后的p值进行筛选后的统计图。

### 参考文献
[1] Mann, H. B., & Whitney, D. R. (1947). On a test of whether one of two random variables is stochastically larger than the other. The annals of mathematical statistics, 50-60.<br/>
[2] Kruskal, W. H., & Wallis, W. A. (1952). Use of ranks in one-criterion variance analysis. Journal of the American statistical Association, 47(260), 583-621.<br/>
[3] Fay, Michael P.; Proschan, Michael A. (2010). "Wilcoxon–Mann–Whitney or t-test? On assumptions for hypothesis tests and multiple interpretations of decision rules". Statistics Surveys. 4: 1–39.<br/>
